<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Library</OutputType>
    <TargetFramework>net48</TargetFramework>
    <RootNamespace>WxAxW.PinAssistant</RootNamespace>
    <AssemblyName>WxAxW.PinAssistant</AssemblyName>
    <FileAlignment>512</FileAlignment>
    <Deterministic>true</Deterministic>
    <LangVersion>10</LangVersion>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <Optimize>false</Optimize>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
	<StartAction>Program</StartAction>
	<StartProgram>$(VALHEIM_INSTALL)\valheim.exe</StartProgram>
	<StartArguments>-console</StartArguments>
	<StartWorkingDirectory>$(VALHEIM_INSTALL)</StartWorkingDirectory>
  </PropertyGroup>

  <!-- Plugin version -->
  <PropertyGroup>
    <Version>1.9.0</Version>
  </PropertyGroup>
  
  <ItemGroup>
    <Reference Include="AutoMapPins" Publicize="true">
      <HintPath>..\packages\AutoMapPins.dll</HintPath>
    </Reference>
    <Reference Include="HUDCompass" Publicize="true">
      <HintPath>..\packages\HUDCompass.dll</HintPath>
	  <Aliases>HUDCompassAlias</Aliases>
    </Reference>
    <Reference Include="Kits_Bitz.Under_The_Radar" Publicize="true">
      <HintPath>..\packages\Kits_Bitz.Under_The_Radar.dll</HintPath>
    </Reference>
    <Reference Include="Pinnacle" Publicize="true">
      <HintPath>..\packages\Pinnacle.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>

  <ItemGroup>
	<None Include="CHANGELOG.md" />
    <None Include="README.md" />
	<EmbeddedResource Include="pin_assistant_bundle" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="JotunnLib" Version="2.24.3" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>

  <PropertyGroup>
    <VALHEIM_MANAGED>$(VALHEIM_INSTALL)/valheim_Data/Managed</VALHEIM_MANAGED>
    <UNITY_FOLDER>$(SolutionDir)ValheimModsUnity</UNITY_FOLDER>
  </PropertyGroup>

  <Target Name="CopyToUnity">
    <Message Text="Copy assemblies to Unity" Importance="high" />
    <Copy SourceFiles="$(VALHEIM_INSTALL)/BepInEx/core/BepInEx.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_INSTALL)/BepInEx/core/0Harmony.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_INSTALL)/BepInEx/core/Mono.Cecil.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_INSTALL)/BepInEx/core/MonoMod.Utils.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_INSTALL)/BepInEx/core/MonoMod.RuntimeDetour.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(TargetDir)Jotunn.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(TargetDir)$(TargetName).dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(TargetDir)$(TargetName).pdb" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
  <Copy Condition="'$(Configuration)' == 'Debug'" SourceFiles="$(TargetDir)$(TargetName).dll.mdb" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/Assembly-CSharp.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/assembly_valheim.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/assembly_utils.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/assembly_postprocessing.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/assembly_sunshafts.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/assembly_guiutils.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/assembly_lux.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/assembly_simplemeshcombine.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/assembly_googleanalytics.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/PlayFab.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/PlayFabParty.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/Splatform.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/Splatform.Steam.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/gui_framework.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/com.rlabrecque.steamworks.net.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
    <Copy SourceFiles="$(VALHEIM_MANAGED)/SoftReferenceableAssets.dll" DestinationFolder="$(UNITY_FOLDER)/Assets/Assemblies" />
  </Target>

  <Target Name="JotunnPostBuildTask" AfterTargets="Build">
    <CallTarget Targets="CopyToUnity" Condition="Exists('$(UNITY_FOLDER)')" />
  </Target>

  <!-- Generate VersionInfo.g.cs before compile -->
  <Target Name="GenerateVersionInfoCs" BeforeTargets="BeforeCompile">

    <!-- A. Wrap your CDATA text in a PropertyGroup -->
    <PropertyGroup>
      <_VersionCsText>
        <![CDATA[
namespace WxAxW.PinAssistant {
    internal static class VersionInfo {
        public const string Current = "$(Version)"%3B
    }
}
        ]]>
      </_VersionCsText>
    </PropertyGroup>

    <!-- B. Valid task element to write the file -->
    <WriteLinesToFile File="$(IntermediateOutputPath)VersionInfo.g.cs" Lines="$(_VersionCsText)" Overwrite="true" />

    <!-- C. Valid ItemGroup to include it in compilation -->
    <ItemGroup>
      <Compile Include="$(IntermediateOutputPath)VersionInfo.g.cs" />
    </ItemGroup>

  </Target>
  
  <Target Name="JotunnPostBuildTaskWin" AfterTargets="Build" Condition=" '$(OS)' == 'Windows_NT' ">
    <Exec Command="powershell.exe -ExecutionPolicy RemoteSigned -File &quot;$(SolutionDir)publish.ps1&quot; -Target &quot;$(ConfigurationName)&quot; -TargetPath &quot;$(TargetDir.TrimEnd('\'))&quot; -TargetAssembly &quot;$(TargetFileName)&quot; -ValheimPath &quot;$(VALHEIM_INSTALL.TrimEnd('\'))&quot; -Version &quot;$(Version)&quot; -DeployPath &quot;$(MOD_DEPLOYPATH.TrimEnd('\'))&quot; -ProjectPath &quot;$(ProjectDir.TrimEnd('\'))&quot; " />
  </Target>
  
  <Target Name="GenerateManifestJson" AfterTargets="Build">
    <!-- Read the entire template into a string -->
    <PropertyGroup>
      <_RawManifestText>
        $([System.IO.File]::ReadAllText('manifest.json.in'))
      </_RawManifestText>
      <!-- Replace the placeholder with the real version -->
      <_FinalManifest>
        $([System.Text.RegularExpressions.Regex]::Replace(
        '$(_RawManifestText)',
        '\$\(Version\)',
        '$(Version)'
        ))
      </_FinalManifest>
    </PropertyGroup>

    <!-- Write out the processed JSON -->
    <WriteLinesToFile File="Package/manifest.json" Lines="$(_FinalManifest)" Overwrite="true" />
  </Target>
</Project>

